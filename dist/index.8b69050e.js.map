{"mappings":"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","sources":["JavaScript/model.js","JavaScript/Views/mainView.js","JavaScript/Views/viewMorePopUp.js","JavaScript/Views/buyPopUp.js","JavaScript/Views/depositBtn.js","JavaScript/Views/withdrawBtn.js","JavaScript/Views/viewAccount.js","JavaScript/Views/investmentGroup.js","JavaScript/Views/portfolioBtn.js","JavaScript/Views/sellPopUp.js","JavaScript/controller.js","JavaScript/Views/bottomBar.js","JavaScript/Views/investmentIndividual.js"],"sourcesContent":["// API CODE\r\n//\r\n\r\n//  seOqbX0SsFtFXcPVRPL28UfKEzVFF5z8NqGpLuSz\r\n\r\nconst stocks = [\"O\", \"PG\", \"AAPL\"];\r\n\r\n// Function to format the API string\r\nconst adjustAPIKey = function (stockArray) {\r\n  const newString = stockArray.join(\",\");\r\n  return newString;\r\n};\r\n\r\n// Formatted string ready to be used in the API call\r\nexport const APIString = adjustAPIKey(stocks);\r\n\r\n// Function to make an AJAX call and return an array of stock objects\r\nexport const getStockData = async function (shares) {\r\n  try {\r\n    // AJAX call to API requesting data\r\n    const data = await fetch(\r\n      `https://api.stockdata.org/v1/data/quote?symbols=${shares}&api_token=seOqbX0SsFtFXcPVRPL28UfKEzVFF5z8NqGpLuSz`\r\n    );\r\n\r\n    // Object containing array of all requested stocks\r\n    const dataObject = await data.json();\r\n\r\n    // Array containing one object of data for each stock that was requested\r\n    const dataArray = dataObject.data;\r\n    return dataArray;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\n// Function to record date\r\nconst recordDate = function () {\r\n  const today = new Date();\r\n  const day = String(today.getDate()).padStart(2, \"0\");\r\n  const month = String(today.getMonth() + 1).padStart(2, \"0\");\r\n  const year = String(today.getFullYear());\r\n\r\n  const fullDate = `${day}/${month}/${year}`;\r\n  return fullDate;\r\n};\r\n\r\n// Stores data at the account level\r\nclass Account {\r\n  constructor(accountName, fundsAvailable, fundsInvested) {\r\n    this.accountName = accountName;\r\n    this.portfolio = [];\r\n    this.fundsAvailable = fundsAvailable;\r\n    this.fundsInvested = fundsInvested;\r\n    this.currency = [\"USD\", \"$\"];\r\n    this.movementHistory = [];\r\n    this.tradeHistory = [];\r\n  }\r\n}\r\n\r\nexport const account1 = new Account(\"Chris Evans\", 0, 0);\r\n\r\n// The array elments for the \"Account\" class' portfolio array\r\nclass Investment {\r\n  constructor(\r\n    investmentShareName,\r\n    investmentSharePrice,\r\n    investmentTicker,\r\n    totalNumShares,\r\n    investmentInitValue,\r\n    investmentID\r\n  ) {\r\n    this.investmentShareName = investmentShareName;\r\n    this.investmentSharePrice = investmentSharePrice;\r\n    this.investmentTicker = investmentTicker;\r\n    this.totalNumShares = +totalNumShares;\r\n    this.investmentInitValue = investmentInitValue;\r\n    this.investmentID = investmentID;\r\n  }\r\n}\r\n\r\n// The array elements for the \"Investments\" class' trades array\r\nclass Trade {\r\n  constructor(shareName, sharePrice, numShares, tradeValueInit) {\r\n    this.shareName = shareName;\r\n    this.sharePrice = sharePrice;\r\n    this.numShares = numShares;\r\n    this.tradeValueInit = tradeValueInit;\r\n  }\r\n}\r\n\r\n// PUCHASE POP UP LOGIC\r\n//\r\n\r\n// Function to check if there are enough funds to make purchase\r\nexport const checkFunds = function (fundsAvailable, numShares, sharePrice) {\r\n  // Calculating amount needed to make purchase\r\n  const amountRequired = fundsAvailable - numShares * sharePrice;\r\n\r\n  // Confirming if purchase can or can't go ahead\r\n  const result = amountRequired >= 0 ? \"approved\" : \"rejected\";\r\n  return result;\r\n};\r\n\r\n// const check = checkFunds(2500, 250, 9);\r\n\r\n// PURCHASE EVENT LOGIC\r\n//\r\n\r\n// Check for existing investment\r\nexport const existingInvestment = function (account, targetStockTicker) {\r\n  // Investment does not exist\r\n  if (account.portfolio.length === 0) return false;\r\n\r\n  // Investment does exist\r\n  if (\r\n    account.portfolio.find(function (investment) {\r\n      return investment[0] === targetStockTicker;\r\n    })\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Create new investment\r\nexport const createInvestment = function (\r\n  //targetAccount,\r\n  shareName,\r\n  sharePrice,\r\n  shareTicker,\r\n  numShares,\r\n  initValue,\r\n  investmentID\r\n) {\r\n  const newInvestment = new Investment(\r\n    shareName,\r\n    sharePrice,\r\n    shareTicker,\r\n    numShares,\r\n    initValue,\r\n    investmentID\r\n  );\r\n\r\n  return newInvestment;\r\n  //targetAccount.portfolio.push(newInvestment);\r\n};\r\n\r\n// Create new trade\r\nexport const createTrade = function (\r\n  //targetInvestment,\r\n  shareName,\r\n  sharePrice,\r\n  numShares,\r\n  initialValue,\r\n  currentValue,\r\n  gainLoss\r\n) {\r\n  /*\r\n  shareName, sharePrice, numShares, tradeGainLoss\r\n  */\r\n  const newTrade = new Trade(\r\n    shareName,\r\n    sharePrice,\r\n    numShares,\r\n    initialValue,\r\n    currentValue,\r\n    gainLoss\r\n  );\r\n  return newTrade;\r\n  //targetInvestment.push(newTrade);\r\n};\r\n\r\n// Add to investments as a whole\r\nexport const addToInvestments = function (\r\n  data,\r\n  account,\r\n  fundCheckResult,\r\n  targetShareID,\r\n  targetSharePrice,\r\n  inputValue\r\n) {\r\n  if (fundCheckResult === \"approved\") {\r\n    const targetShareName = data.find(function (share) {\r\n      return share.ticker === targetShareID;\r\n    }).name;\r\n\r\n    const investmentType = existingInvestment(account, targetShareID);\r\n\r\n    // Workout the initial value of the investment\r\n    const initialValue = targetSharePrice * inputValue;\r\n\r\n    // Unique ID to identify each purchase of shares\r\n    const uniqueID = Math.floor(Math.random() * 10000000);\r\n\r\n    // If investment does not exist\r\n    if (investmentType === false) {\r\n      // Create a new array for this investment\r\n      const newInvestmentArray = new Array(`${targetShareID}`);\r\n\r\n      // Create new investment object\r\n      /*\r\n      shareName,\r\n      sharePrice,\r\n      shareTicker,\r\n      numShares,\r\n      initValue,\r\n      investmentID\r\n      */\r\n\r\n      const newInvestment = createInvestment(\r\n        //modelObject.account1,\r\n        targetShareName,\r\n        targetSharePrice,\r\n        targetShareID,\r\n        inputValue,\r\n        initialValue,\r\n        uniqueID\r\n      );\r\n\r\n      // Add first investment object to new investment array\r\n      newInvestmentArray.push(newInvestment);\r\n\r\n      // Push this new investment array to the account's portfolio array\r\n      account.portfolio.push(newInvestmentArray);\r\n\r\n      // Update the account's trade history\r\n      const curDate = recordDate();\r\n\r\n      account.tradeHistory.push({\r\n        date: curDate,\r\n        name: targetShareID,\r\n        type: \"Purchase\",\r\n        value: initialValue,\r\n        shares: inputValue,\r\n      });\r\n\r\n      // Update account balances\r\n      account.fundsAvailable = account.fundsAvailable - initialValue;\r\n\r\n      account.fundsInvested = account.fundsInvested + initialValue;\r\n\r\n      return;\r\n    }\r\n\r\n    if (investmentType === true) {\r\n      // Create new investment object\r\n      const existingInvestment = createInvestment(\r\n        /*\r\n      shareName,\r\n      sharePrice,\r\n      shareTicker,\r\n      numShares,\r\n      initValue,\r\n      investmentID\r\n      */\r\n        targetShareName,\r\n        targetSharePrice,\r\n        targetShareID,\r\n        inputValue,\r\n        initialValue,\r\n        uniqueID\r\n      );\r\n\r\n      // Find correct investment array\r\n      const targetInvestmentArray = account.portfolio.find(function (\r\n        investment\r\n      ) {\r\n        return investment[0] === targetShareID;\r\n      });\r\n\r\n      // Push investment object to existing investment array\r\n      targetInvestmentArray.push(existingInvestment);\r\n\r\n      // Update the account's trade history\r\n      const curDate = recordDate();\r\n\r\n      account.tradeHistory.push({\r\n        date: curDate,\r\n        name: targetShareID,\r\n        type: \"Purchase\",\r\n        value: initialValue,\r\n        shares: inputValue,\r\n      });\r\n\r\n      // Update account balances\r\n      account.fundsAvailable = account.fundsAvailable - initialValue;\r\n\r\n      account.fundsInvested = account.fundsInvested + initialValue;\r\n\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (fundCheckResult === \"rejected\") {\r\n    // Turn error text red for more emphasis\r\n    return \"error\";\r\n  }\r\n};\r\n\r\n// TOP BUTTONS LOGIC\r\n//\r\n\r\n// Removing deposit value from account balance\r\nexport const withdrawAccount = function (enteredWithdrawAmount) {\r\n  // Is there enough to withdraw AND was a valid input entered?\r\n  if (\r\n    enteredWithdrawAmount <= account1.fundsAvailable &&\r\n    enteredWithdrawAmount > 0\r\n  ) {\r\n    const curFundsAvailable = account1.fundsAvailable;\r\n    const fundsRequested = enteredWithdrawAmount;\r\n\r\n    // Update fundsAvailable data in account\r\n    account1.fundsAvailable = curFundsAvailable - fundsRequested;\r\n\r\n    // Record the date that this request was made\r\n    const curDate = recordDate();\r\n\r\n    // Push a new movement object to movements history\r\n    account1.movementHistory.push({\r\n      movement: -fundsRequested,\r\n      date: curDate,\r\n    });\r\n\r\n    return \"success\";\r\n  } else if (enteredWithdrawAmount > account1.fundsAvailable) {\r\n    return \"failure-not-enough\";\r\n  } else {\r\n    return \"failure-invalid-input\";\r\n  }\r\n};\r\n\r\n// Adding deposit value to account balance\r\nexport const depositAccount = function (enteredDepositAmount) {\r\n  if (enteredDepositAmount > 0) {\r\n    const curFundsAvailable = account1.fundsAvailable;\r\n    const newFunds = enteredDepositAmount;\r\n\r\n    // Update fundsAvailable data in account\r\n    account1.fundsAvailable = curFundsAvailable + newFunds;\r\n\r\n    // Record the date that this request was made\r\n    const curDate = recordDate();\r\n\r\n    // Add and update this deposit (movement) to movementHistory array\r\n    account1.movementHistory.push({\r\n      movement: newFunds,\r\n      date: curDate,\r\n    });\r\n    return \"success\";\r\n  } else {\r\n    return \"error\";\r\n  }\r\n};\r\n\r\n// VIEW PORTFOLIO LOGIC\r\n//\r\n\r\n// Loop over group investments to build an object with the total values\r\n\r\nexport const buildTallyObject = function (accountPortfolio) {\r\n  // Empty initial array to store tally objects\r\n  const tallyArray = [];\r\n\r\n  // Loop over portfolio array\r\n  accountPortfolio.forEach(function (investment) {\r\n    // Exclude first element of each array (ID Tag), leaving just an array of objects\r\n    const [tallyID] = investment.slice(0, 1);\r\n\r\n    const tallyData = investment.slice(1);\r\n\r\n    // Workout total tallys\r\n    const averageSharePrice =\r\n      tallyData\r\n        .map(function (price) {\r\n          return price.investmentSharePrice;\r\n        })\r\n        .reduce(function (start, price) {\r\n          return start + price;\r\n        }) / tallyData.length;\r\n\r\n    const tallyNumShares = tallyData\r\n      .map(function (numShares) {\r\n        return numShares.totalNumShares;\r\n      })\r\n      .reduce(function (start, numShares) {\r\n        return start + numShares;\r\n      });\r\n\r\n    const tallyInvested = tallyData\r\n      .map(function (invested) {\r\n        return invested.investmentInitValue;\r\n      })\r\n      .reduce(function (start, invested) {\r\n        return start + invested;\r\n      });\r\n\r\n    // Build an object containing total tallys\r\n    const tallyObject = {\r\n      objectID: tallyID,\r\n      objectAvgSharePrice: averageSharePrice.toFixed(2),\r\n      objectNumShares: tallyNumShares.toFixed(2),\r\n      objectInvested: tallyInvested.toFixed(2),\r\n    };\r\n\r\n    tallyArray.push(tallyObject);\r\n    return;\r\n  });\r\n  return tallyArray;\r\n};\r\n\r\n// Loop over individual investments and render their data within the individual investment cards\r\n\r\nexport const buildIndividualInvestmentArray = function (\r\n  groupInvestmentArray,\r\n  targetGroupID\r\n) {\r\n  // Find the correct investment group array so it's ID can be obtained and used to search the portfolio for the individual investment array\r\n  const targetGroupArray = groupInvestmentArray.find(function (\r\n    groupInvestment\r\n  ) {\r\n    return groupInvestment.objectID == targetGroupID;\r\n  });\r\n\r\n  // The final array ready for card rendering\r\n  const individualInvestmentsArray = account1.portfolio\r\n    .find(function (investment) {\r\n      return investment[0] === targetGroupArray.objectID;\r\n    })\r\n    .slice(1);\r\n  return individualInvestmentsArray;\r\n};\r\n\r\n// Delete an (individual) investment object from the account's data\r\nexport const sellIndividualInvestment = function (ticker, ID) {\r\n  // The target array\r\n  const deleteTargetArr = account1.portfolio.find(function (groupInvestment) {\r\n    return groupInvestment[0] === ticker;\r\n  });\r\n\r\n  // Index of the target array\r\n  const deleteTargetArrIndex = account1.portfolio.indexOf(deleteTargetArr);\r\n\r\n  // The target element in that array\r\n  const deleteTarget = account1.portfolio\r\n    .find(function (groupInvestment) {\r\n      return groupInvestment[0] === ticker;\r\n    })\r\n    .slice(1)\r\n    .find(function (individualInvestment) {\r\n      return individualInvestment.investmentID === ID;\r\n    });\r\n\r\n  // Index number of array element to be removed\r\n  const deleteTargetIndex = deleteTargetArr.indexOf(deleteTarget);\r\n\r\n  // Update the account's trade history\r\n  const curDate = recordDate();\r\n\r\n  account1.tradeHistory.push({\r\n    date: curDate,\r\n    name: deleteTarget.investmentTicker,\r\n    type: \"Sale\",\r\n    value: deleteTarget.investmentSharePrice,\r\n    shares: deleteTarget.totalNumShares,\r\n  });\r\n\r\n  // Update the bottom bar statistics data\r\n  account1.fundsAvailable =\r\n    account1.fundsAvailable + deleteTarget.investmentInitValue;\r\n\r\n  account1.fundsInvested =\r\n    account1.fundsInvested -\r\n    deleteTarget.investmentSharePrice * deleteTarget.totalNumShares;\r\n\r\n  // If only one investment exists in the entire share\r\n  if (deleteTargetArr.length === 2) {\r\n    // Delete the array as a who;e\r\n    account1.portfolio.splice(deleteTargetArrIndex, 1);\r\n    return \"single\";\r\n  }\r\n  if (deleteTargetArr.length > 2) {\r\n    // Remove the corresponding array element\r\n    deleteTargetArr.splice(deleteTargetIndex, 1);\r\n    return \"multiple\";\r\n  }\r\n};\r\n\r\n// BOTTOM BAR STATISTICS LOGIC\r\n//\r\n\r\n// Funds available data\r\nexport const getFundsAvailable = function () {\r\n  return account1.fundsAvailable.toFixed(2);\r\n};\r\n\r\n// Funds invested data\r\nexport const getFundsInvested = function () {\r\n  return account1.fundsInvested.toFixed(2);\r\n};\r\n\r\n// Total account value data\r\nexport const getCurrentValue = function () {\r\n  const currentValue = account1.fundsAvailable + account1.fundsInvested;\r\n\r\n  return currentValue.toFixed(2);\r\n};\r\n","const stockContainer = document.querySelector(\".view-container\");\r\n\r\nexport const renderStockList = function (stockArray) {\r\n  stockArray.forEach(function (stock) {\r\n    stockContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `<div class=\"share\" id=\"${stock.ticker}\">\r\n            <div class=\"share-info\">\r\n\r\n              <div class=\"share-name\">\r\n                <h3 class=\"heading-3\">${stock.name}</h3>\r\n              </div>\r\n\r\n              <div class=\"share-ticker\">\r\n                <h3 class=\"heading-3\">${stock.ticker}</h3>\r\n              </div>\r\n\r\n              <div class=\"share-price\">\r\n                <h3 class=\"heading-3\">$${stock.price}</h3>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"share-view\">\r\n              <button class=\"btn btn-dark\">View</button>\r\n            </div>\r\n          </div>`\r\n    );\r\n  });\r\n};\r\n","const stockPopUp = document.querySelector(\".popup\");\r\nconst overlay = document.querySelector(\".overlay\");\r\nconst navigation = document.querySelector(\".details-navigation\");\r\nconst backBtn = document.querySelector(\".details-back-icon\");\r\nconst btnBuyText = document.querySelector(\"#btn-buy-text\");\r\n\r\n// RENDER INITIAL VIEW MORE WINDOW\r\n//\r\n\r\nexport const hideViewMore = function () {\r\n  stockPopUp.classList.add(\"hidden\");\r\n  overlay.classList.add(\"hidden\");\r\n};\r\n\r\nexport const showViewMore = function () {\r\n  stockPopUp.classList.remove(\"hidden\");\r\n  overlay.classList.remove(\"hidden\");\r\n};\r\n\r\nexport const renderStockPopUp = function (targetShareID, sharesArray) {\r\n  // Finding the correct data and rendering it\r\n\r\n  // Matching target stock with it's data object\r\n  const targetStock = sharesArray.find(function (share) {\r\n    return share.ticker === targetShareID;\r\n  });\r\n  // Rendering that stock's object in the popup window\r\n\r\n  const marketCap = function (marketCap) {\r\n    let marketCapString = \"\";\r\n    // If market cap is 1 trillion or more\r\n    if (marketCap > 999999999999) {\r\n      marketCapString = `$${(marketCap / 1000000000000).toFixed(2)}T`;\r\n      return marketCapString;\r\n    }\r\n    // under 1 trillion = 999,999,999,999\r\n    // If market cap is under 1 trillion\r\n    if (marketCap < 999999999999) {\r\n      marketCapString = `$${marketCap / 1000000000}B`;\r\n      return marketCapString;\r\n    }\r\n  };\r\n\r\n  const viewMoreHtml = `\r\n  <div class=\"details-container\">\r\n    <div class=\"details-logo\">\r\n      <img\r\n        class=\"details-logo-file\"\r\n        src=\"External Content/AppleLogo.png\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"details-info details-name\">\r\n      <p class=\"main-text\">Name:</p>\r\n      <p class=\"main-text\" id=\"stockName\">${targetStock.name}</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-ticker\">\r\n      <p class=\"main-text\">Ticker:</p>\r\n      <p class=\"main-text\" id=\"tickerSymbol\">${targetStock.ticker}</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-price\">\r\n      <p class=\"main-text\">Share Price:</p>\r\n      <p class=\"main-text\" id=\"sharePrice\">$${targetStock.price}</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-day-low\">\r\n      <p class=\"main-text\">Day Low:</p>\r\n      <p class=\"main-text\" id=\"dayLow\">$${targetStock.day_low}</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-day-high\">\r\n      <p class=\"main-text\">Day High:</p>\r\n      <p class=\"main-text\" id=\"dayHigh\">$${targetStock.day_high}\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-market\">\r\n      <p class=\"main-text\">Market:</p>\r\n      <p class=\"main-text\" id=\"market\">${targetStock.exchange_short}\r\n      </p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-marketcap\">\r\n      <p class=\"main-text\">Market Cap:</p>\r\n      <p class=\"main-text\" id=\"marketCap\">${marketCap(\r\n        targetStock.market_cap\r\n      )}</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-52low\">\r\n      <p class=\"main-text\">52 Week-Low:</p>\r\n      <p class=\"main-text\" id=\"yearLow\">$116.22</p>\r\n    </div>\r\n\r\n    <div class=\"details-info details-52high\">\r\n      <p class=\"main-text\">52 Week-High:</p>\r\n      <p class=\"main-text\" id=\"yearHigh\">$182.71</p>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"details-btn btn-buy\" id=\"btn-buy\">\r\n          <button class=\"btn btn-dark btn-buy-text\" id=\"btn-buy-text\">Buy shares</button>\r\n  </div>\r\n`;\r\n\r\n  backBtn.classList.add(\"hidden\");\r\n  navigation.insertAdjacentHTML(\"afterend\", viewMoreHtml);\r\n  //popUp52Low.textContent === targetStock.52_week_low;\r\n  //popUp52High.textContent === targetStock.52_week_high;*/\r\n};\r\n\r\n// REMOVE CONTENT TO MAKE SPACE FOR \"BUY\" POP UP\r\n//\r\n\r\nexport const clearViewMore = function () {\r\n  const detailsContainer = document.querySelector(\".details-container\");\r\n  const buyBtn = document.querySelector(\".btn-buy\");\r\n\r\n  if (detailsContainer && buyBtn) {\r\n    detailsContainer.remove();\r\n    buyBtn.remove();\r\n  }\r\n};\r\n","const backBtn = document.querySelector(\".details-back-icon\");\r\nconst btnBuyText = document.querySelector(\"#btn-buy-text\");\r\nconst navigation = document.querySelector(\".details-navigation\");\r\n\r\nexport const renderPurchasePopUp = function (stockID, stockArray) {\r\n  const targetStock = stockArray.find(function (stock) {\r\n    return stock.ticker === stockID;\r\n  });\r\n\r\n  const purchaseHtml = `\r\n        <div class=\"buy-container\">\r\n          <div class=\"buy-selector\">\r\n            <div class=\"buy-units unit-selected\">\r\n              <p class=\"main-text cursor-pointer center-text unit\">Units</p>\r\n            </div>\r\n            <div class=\"buy-funds\">\r\n              <p class=\"main-text cursor-pointer center-text fund\">Funds</p>\r\n            </div>\r\n\r\n            <div class=\"buy-amount\">\r\n              <button class=\"square-btn\" id=\"buy-less\">-</button>\r\n              <input type=\"number\" class=\"buy-input\" />\r\n              <button class=\"square-btn\" id=\"buy-more\">+</button>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"buy-summary\">\r\n            <p class=\"main-text center-text summary-text\"></p>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"details-btn btn-purchase\" id=\"btn-purchase\">\r\n          <button class=\"btn btn-dark btn-purchase-text\" id=\"btn-buy-text\">Purchase</button>\r\n        </div>\r\n    `;\r\n\r\n  backBtn.classList.remove(\"hidden\");\r\n  navigation.insertAdjacentHTML(\"afterend\", purchaseHtml);\r\n};\r\n\r\nexport const clearPurchase = function () {\r\n  const purchaseContainer = document.querySelector(\".buy-container\");\r\n  const purchaseBtn = document.querySelector(\".btn-purchase\");\r\n\r\n  if (purchaseContainer && purchaseBtn) {\r\n    purchaseContainer.remove();\r\n    purchaseBtn.remove();\r\n  }\r\n};\r\n\r\nexport const renderPurchaseSummary = function (quantity, stock, amount) {\r\n  const purchaseSummary = document.querySelector(\".summary-text\");\r\n\r\n  if (quantity === 0) {\r\n    purchaseSummary.textContent = \"\";\r\n  }\r\n\r\n  purchaseSummary.textContent = `Buy ${quantity} ${stock} for $${amount}`;\r\n};\r\n\r\nexport const renderPurchaseError = function (totalAmount, accountAmount) {\r\n  const purchaseSummary = document.querySelector(\".summary-text\");\r\n\r\n  purchaseSummary.textContent = `Oops, not enough funds! Deposit $${(\r\n    totalAmount - accountAmount\r\n  ).toFixed(2)} more to make stock purchase`;\r\n};\r\n\r\nexport const renderMainPurchaseError = function () {\r\n  const purchaseSummary = document.querySelector(\".summary-text\");\r\n\r\n  purchaseSummary.classList.add(\"text-alert\");\r\n};\r\n","const navigation = document.querySelector(\".details-navigation\");\r\nconst popup = document.querySelector(\".popup\");\r\nconst backBtn = document.querySelector(\".details-back-icon\");\r\nconst overlay = document.querySelector(\".overlay\");\r\n\r\nexport const renderDepositPopup = function () {\r\n  popup.classList.remove(\"hidden\");\r\n  overlay.classList.remove(\"hidden\");\r\n\r\n  const depositHtml = `\r\n    <div class=\"deposit\">\r\n          <div class=\"deposit-container\">\r\n            <input\r\n              type=\"number\"\r\n              class=\"deposit-input\"\r\n              placeholder=\"Currency will be in USD\"\r\n            />\r\n            <button class=\"btn btn-dark deposit-btn\">Add funds</button>\r\n          </div>\r\n        </div>\r\n        `;\r\n  navigation.insertAdjacentHTML(\"afterend\", depositHtml);\r\n  backBtn.classList.add(\"hidden\");\r\n};\r\n\r\nexport const renderDepositErrorMessage = function () {\r\n  const depositErrorHtml = `\r\n    <p class=\"main-text deposit-error-message\">Please enter an amount greater than zero!</p>\r\n    `;\r\n  const depositContainer = document.querySelector(\".deposit-container\");\r\n\r\n  if (depositContainer) {\r\n    depositContainer.insertAdjacentHTML(\"beforeend\", depositErrorHtml);\r\n    return;\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const clearDepositPopup = function () {\r\n  const depositContainer = document.querySelector(\".deposit-container\");\r\n  const depositError = document.querySelector(\".deposit-error-message\");\r\n\r\n  if (depositContainer) {\r\n    depositContainer.remove();\r\n    return;\r\n  }\r\n  if (depositContainer && depositError) {\r\n    depositContainer.remove();\r\n    depositError.remove();\r\n    return;\r\n  }\r\n};\r\n","const navigation = document.querySelector(\".details-navigation\");\r\nconst popup = document.querySelector(\".popup\");\r\nconst backBtn = document.querySelector(\".details-back-icon\");\r\nconst overlay = document.querySelector(\".overlay\");\r\n\r\nexport const renderWithdrawPopUp = function () {\r\n  popup.classList.remove(\"hidden\");\r\n  overlay.classList.remove(\"hidden\");\r\n\r\n  const withdrawHtml = `\r\n    <div class=\"withdraw\">\r\n          <div class=\"withdraw-container\">\r\n            <input\r\n              type=\"number\"\r\n              class=\"withdraw-input\"\r\n              placeholder=\"Currency will be in USD\"\r\n            />\r\n            <button class=\"btn btn-dark withdraw-btn\">Withdraw funds</button>\r\n          </div>\r\n        </div>\r\n        `;\r\n\r\n  navigation.insertAdjacentHTML(\"afterend\", withdrawHtml);\r\n  backBtn.classList.add(\"hidden\");\r\n};\r\n\r\nexport const renderWithdrawErrorMessage = function (message) {\r\n  const withdrawErrorHtml = `\r\n    <p class=\"main-text deposit-error-message\">${message}</p>\r\n    `;\r\n  const withdrawContainer = document.querySelector(\".withdraw-container\");\r\n\r\n  if (withdrawContainer) {\r\n    withdrawContainer.insertAdjacentHTML(\"beforeend\", withdrawErrorHtml);\r\n    return;\r\n  } else {\r\n    return;\r\n  }\r\n};\r\n\r\nexport const clearWithdrawPopUp = function () {\r\n  const withdrawContainer = document.querySelector(\".withdraw-container\");\r\n  const withdrawError = document.querySelector(\".withdraw-error-message\");\r\n\r\n  if (withdrawContainer) {\r\n    withdrawContainer.remove();\r\n    return;\r\n  }\r\n  if (withdrawContainer && withdrawError) {\r\n    withdrawContainer.remove();\r\n    withdrawError.remove();\r\n    return;\r\n  }\r\n};\r\n","const accountNavigation = document.querySelector(\".view-nav\");\r\nconst mainViewContainer = document.querySelector(\".view-container\");\r\nconst navLeft = document.querySelector(\".view-nav-left\");\r\nconst navRight = document.querySelector(\".view-nav-right\");\r\n\r\n// Reveal the navigation options for viewing account\r\nexport const renderAccountNavigation = function () {\r\n  accountNavigation.classList.remove(\"hidden\");\r\n  navLeft.classList.remove(\"hidden\");\r\n  navRight.classList.remove(\"hidden\");\r\n};\r\n\r\n// Hide the navigation options for viewing account\r\nexport const hideAccountNavigation = function () {\r\n  accountNavigation.classList.add(\"hidden\");\r\n};\r\n\r\n// Render the account movements history (deposits, withdrawals)\r\nexport const renderAccountMovements = function (movementHistoryArray) {\r\n  // Loop over the array and render a movement card for each array element (which is an object)\r\n  movementHistoryArray.forEach(function (movement) {\r\n    mainViewContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `\r\n        <div class=\"movement\">\r\n            <div class=\"movement-info\">\r\n\r\n            <div class=\"movement-date\">\r\n                <h3 class=\"heading-3\">${movement.date}</h3>\r\n            </div>\r\n\r\n            <div class=\"movement-type\">\r\n                <h3 class=\"heading-3\">${\r\n                  movement.movement < 0 ? \"WITHDRAWAL\" : \"DEPOSIT\"\r\n                }</h3>\r\n            </div>\r\n\r\n            <div class=\"movement-amount\">\r\n                <h3 class=\"heading-3\">${\r\n                  movement.movement < 0\r\n                    ? `-$${Math.abs(movement.movement)}`\r\n                    : `$${movement.movement}`\r\n                }</h3>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        `\r\n    );\r\n  });\r\n};\r\n\r\n// Render the account trades history (purchases, sales)\r\nexport const renderAccountTrades = function (tradesHistoryArray) {\r\n  console.log(tradesHistoryArray);\r\n  tradesHistoryArray.forEach(function (trade) {\r\n    mainViewContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `\r\n        <div class=\"trade\">\r\n            <div class=\"trade-info\">\r\n\r\n            <div class=\"trade-date\">\r\n                <h3 class=\"heading-3\">${trade.date}</h3>\r\n            </div>\r\n\r\n            <div class=\"trade-name\">\r\n                <h3 class=\"heading-3\">${trade.name}</h3>\r\n            </div>  \r\n\r\n            <div class=\"trade-type\">\r\n                <h3 class=\"heading-3\">${trade.type}</h3>\r\n            </div>\r\n\r\n            <div class=\"trade-shares\">\r\n                <h3 class=\"heading-3\">${trade.shares} share${\r\n        trade.shares > 1 ? \"s\" : \"\"\r\n      }</h3>\r\n            </div>    \r\n\r\n            <div class=\"trade-amount\">\r\n                <h3 class=\"heading-3\">$${trade.value}</h3>\r\n            </div>\r\n            </div>\r\n        </div>\r\n            `\r\n    );\r\n  });\r\n};\r\n\r\n// Render empty account history view\r\nexport const renderNoHistory = function () {};\r\n\r\n// Reset the view-containers content to nothing\r\nexport const clearViewWindow = function () {\r\n  const currentContent = Array.from(mainViewContainer.childNodes);\r\n\r\n  // Remove each child element from the array\r\n  currentContent.forEach(function (content) {\r\n    content.remove();\r\n    return;\r\n  });\r\n};\r\n","export const renderGroupInvestment = function (groupInvestmentsArray) {\r\n  const portfolioContainer = document.querySelector(\".portfolio\");\r\n  // Render all GROUP investments\r\n\r\n  groupInvestmentsArray.forEach(function (groupInvestment) {\r\n    portfolioContainer.insertAdjacentHTML(\r\n      \"beforeend\",\r\n      `\r\n        <div class=\"investment-group\" id=\"${groupInvestment.objectID}\">\r\n            <div class=\"investment-group-name\">\r\n                <p class=\"main-text center-text\">${groupInvestment.objectID}</p>\r\n            </div>\r\n\r\n            <div class=\"investment-group-price\">\r\n                <p class=\"main-text center-text\">$${groupInvestment.objectAvgSharePrice}</p>\r\n            </div>\r\n\r\n            <div class=\"investment-group-numshares\">\r\n                <p class=\"main-text center-text\">${groupInvestment.objectNumShares}</p>\r\n            </div>\r\n\r\n            <div class=\"investment-group-invested\">\r\n                <p class=\"main-text center-text\">$${groupInvestment.objectInvested}</p>\r\n            </div>\r\n\r\n            <div class=\"investment-group-button\">\r\n                <svg class=\"investment-group-icon   chevron-down\">\r\n                    <use xlink:href=\"CSS/chevrons.svg#icon-chevron-small-down\">\r\n                    </use>\r\n                </svg>\r\n\r\n                <svg class=\"investment-group-icon chevron-up icon-contract\">\r\n                    <use xlink:href=\"CSS/chevrons.svg#icon-chevron-small-up\">\r\n                    </use>\r\n                </svg>\r\n            </div>\r\n\r\n            <div class=\"investment-container\" id=${groupInvestment.objectID}>\r\n            </div>\r\n        </div>\r\n        `\r\n    );\r\n  });\r\n};\r\n\r\nexport const changeChevron = function (target) {\r\n  const [chevronDown, chevronUp] = Array.from(target.children);\r\n\r\n  chevronDown.classList.toggle(\"icon-contract\");\r\n  chevronUp.classList.toggle(\"icon-contract\");\r\n};\r\n","const mainViewContainer = document.querySelector(\".view-container\");\r\nconst accountNavigation = document.querySelector(\".view-nav\");\r\nconst nullNavigation = document.querySelector(\".view-nav-right\");\r\n\r\nexport const renderPortfolioView = function () {\r\n  // Render portfolio container and headings\r\n  const portfolioHtml = `\r\n    <div class=\"portfolio\">\r\n        <div class=\"portfolio-headings\">\r\n            <div class=\"portfolio-headings-name\">\r\n                <h4 class=\"heading-4 center-text\">Share:</h4>\r\n            </div>\r\n\r\n            <div class=\"portfolio-headings-price\">\r\n                <h4 class=\"heading-4 center-text\">Price:</h4>\r\n            </div>\r\n\r\n            <div class=\"portfolio-headings-numshares\">\r\n                <h4 class=\"heading-4 center-text\">No. Shares:</h4>\r\n            </div>\r\n\r\n            <div class=\"portfolio-headings-invested\">\r\n                <h4 class=\"heading-4 center-text\">Invested:</h4>\r\n            </div>\r\n\r\n            <div class=\"portfolio-headings-blank\">\r\n                <svg class=\"portfolio-headings-icon\">\r\n                    <use xlink:href=\"CSS/chevrons.svg#icon-chevron-small-down\"></use>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  `;\r\n\r\n  mainViewContainer.insertAdjacentHTML(\"beforeend\", portfolioHtml);\r\n};\r\n\r\nexport const renderPortfolioNavigation = function () {\r\n  accountNavigation.classList.remove(\"hidden\");\r\n  nullNavigation.classList.add(\"hidden\");\r\n};\r\n","const navigation = document.querySelector(\".details-navigation\");\r\nconst backBtn = document.querySelector(\".details-back-icon\");\r\n\r\nexport const renderSellPopUp = function () {\r\n  const sellPopUpHtml = `\r\n  <div class=\"sell\">\r\n    <div class=\"sell-container\">\r\n        <div class=\"sell-text\">\r\n            <h3 class=\"heading-3\">Close this position?</h3>\r\n        </div>\r\n\r\n        <div class=\"sell-buttons\">\r\n            <button class=\"btn btn-dark\" id=\"btn-confirm-sell\">Yes</button>\r\n\r\n            <button class=\"btn btn-light\" id=\"btn-deny-sell\">No</button>\r\n        </div>\r\n    </div>\r\n  </div>\r\n  `;\r\n\r\n  navigation.insertAdjacentHTML(\"afterend\", sellPopUpHtml);\r\n  backBtn.classList.add(\"hidden\");\r\n};\r\n\r\nexport const clearSellPopUp = function () {\r\n  const sellContainer = document.querySelector(\".sell\");\r\n\r\n  if (sellContainer) {\r\n    sellContainer.remove();\r\n  }\r\n};\r\n","import * as modelObject from \"./model.js\";\r\nimport * as mainViewObject from \"./Views/mainView.js\";\r\nimport * as viewMorePopUp from \"./Views/viewMorePopUp.js\";\r\nimport * as viewBuyPopUp from \"./Views/buyPopUp.js\";\r\nimport * as viewBottomBar from \"./Views/bottomBar.js\";\r\nimport * as viewDepositBtn from \"./Views/depositBtn.js\";\r\nimport * as viewWithdrawBtn from \"./Views/withdrawBtn.js\";\r\nimport * as viewAccount from \"./Views/viewAccount.js\";\r\nimport * as viewInvestmentGroup from \"./Views/investmentGroup.js\";\r\nimport * as viewInvestmentIndividual from \"./Views/investmentIndividual.js\";\r\nimport * as viewPortfolio from \"./Views/portfolioBtn.js\";\r\nimport * as viewSellPopUp from \"./Views/sellPopUp.js\";\r\n\r\nconst popUp = document.querySelector(\".popup\");\r\nconst overlay = document.querySelector(\".overlay\");\r\nconst btnClosePopUp = document.querySelector(\".details-close-icon\");\r\nconst backBtn = document.querySelector(\".details-back-icon\");\r\nconst buyBtn = document.querySelector(\"#btn-buy-text\");\r\nconst depositBtn = document.querySelector(\"#btnDeposit\");\r\nconst withdrawBtn = document.querySelector(\"#btnWithdraw\");\r\nconst viewAccountBtn = document.querySelector(\"#btnAccount\");\r\nconst accountBackBtn = document.querySelector(\".view-nav-back-icon\");\r\nconst movementsBtn = document.querySelector(\"#btnMovements\");\r\nconst tradesBtn = document.querySelector(\"#btnTrades\");\r\nconst portfolioBtn = document.querySelector(\"#btnPortfolio\");\r\n\r\n// RENDER INITIAL SHARES CODE\r\n//\r\n\r\nconst tickerString = modelObject.APIString;\r\n\r\nconst mockData = await modelObject.getStockData(tickerString);\r\n\r\nmainViewObject.renderStockList(mockData);\r\n\r\n// BOTTOM BAR STATISTICS LOGIC\r\n//\r\n\r\nconst updateBottomBar = function () {\r\n  // Update funds available\r\n  viewBottomBar.renderFundsAvailanble(modelObject.getFundsAvailable());\r\n\r\n  // Update funds invested\r\n  viewBottomBar.renderFundsInvested(modelObject.getFundsInvested());\r\n\r\n  // Update account's current value;\r\n  viewBottomBar.renderCurrentValue(modelObject.getCurrentValue());\r\n};\r\nupdateBottomBar();\r\n\r\n// VIEW MORE POP UP CODE\r\n//\r\n\r\n// Render view more pop up\r\nlet targetShareID;\r\n\r\nconst openViewMorePopUp = function () {\r\n  document.addEventListener(\"click\", function (e) {\r\n    // View more pop up listeners\r\n\r\n    if (!e.target.classList.contains(\"btn\")) {\r\n      return;\r\n    } else {\r\n      targetShareID = e.target.closest(\".share\").id;\r\n\r\n      //viewMorePopUp.renderStockPopUp(targetShareID, mockData);\r\n\r\n      // Reveal pop up\r\n      viewMorePopUp.showViewMore();\r\n\r\n      // Render UI\r\n      viewMorePopUp.renderStockPopUp(targetShareID, mockData);\r\n\r\n      return targetShareID;\r\n    }\r\n  });\r\n};\r\nopenViewMorePopUp();\r\n\r\n// Close view more pop up\r\n\r\n// General function\r\nconst closeViewMorePopUp = function () {\r\n  viewMorePopUp.hideViewMore();\r\n\r\n  viewMorePopUp.clearViewMore();\r\n  viewBuyPopUp.clearPurchase();\r\n  viewDepositBtn.clearDepositPopup();\r\n  viewWithdrawBtn.clearWithdrawPopUp();\r\n  viewSellPopUp.clearSellPopUp();\r\n};\r\n\r\n// via Escape key\r\ndocument.addEventListener(\"keydown\", function (e) {\r\n  if (e.key === \"Escape\" && !popUp.classList.contains(\"hidden\")) {\r\n    closeViewMorePopUp();\r\n  }\r\n});\r\n\r\n// Via close button\r\nbtnClosePopUp.addEventListener(\"click\", function () {\r\n  closeViewMorePopUp();\r\n});\r\n\r\n// Via overlay\r\noverlay.addEventListener(\"click\", function () {\r\n  if (!popUp.classList.contains(\"hidden\")) {\r\n    closeViewMorePopUp();\r\n  }\r\n});\r\n\r\n// PURCHASE SHARES POP UP CODE\r\n//\r\n\r\n// Open up \"purchase shares\" UI\r\nconst openPurchaseWindow = function () {\r\n  document.addEventListener(\"click\", function (e) {\r\n    if (e.target.classList.contains(\"btn-buy-text\")) {\r\n      // Clear view more content from pop up\r\n      viewMorePopUp.clearViewMore();\r\n\r\n      // Replace it with share purchase UI\r\n      viewBuyPopUp.renderPurchasePopUp(targetShareID, mockData);\r\n    }\r\n  });\r\n};\r\nopenPurchaseWindow();\r\n\r\n// Purchase stock pop up listeners\r\nconst renderPurchaseBtns = function () {\r\n  document.addEventListener(\"click\", function (e) {\r\n    // Select units function\r\n\r\n    const revealUnits = function () {\r\n      const unitBackground = document.querySelector(\".buy-units\");\r\n      const fundBackground = document.querySelector(\".buy-funds\");\r\n      unitBackground.classList.add(\"unit-selected\");\r\n      fundBackground.classList.remove(\"fund-selected\");\r\n    };\r\n\r\n    const revealFunds = function () {\r\n      const unitBackground = document.querySelector(\".buy-units\");\r\n      const fundBackground = document.querySelector(\".buy-funds\");\r\n      unitBackground.classList.remove(\"unit-selected\");\r\n      fundBackground.classList.add(\"fund-selected\");\r\n    };\r\n\r\n    // Select units\r\n    if (e.target.classList.contains(\"unit\")) {\r\n      const unitMethod = e.target;\r\n\r\n      if (!unitMethod.classList.contains(\"unit-selected\")) {\r\n        revealUnits();\r\n      }\r\n      if (unitMethod.classList.contains(\"unit-selected\")) {\r\n        revealFunds();\r\n      }\r\n    }\r\n\r\n    // Select funds\r\n    if (e.target.classList.contains(\"fund\")) {\r\n      const fundMethod = e.target;\r\n\r\n      if (!fundMethod.classList.contains(\"fund-selected\")) {\r\n        revealFunds();\r\n      }\r\n      if (fundMethod.classList.contains(\"fund-selected\")) {\r\n        revealUnits();\r\n      }\r\n    }\r\n  });\r\n};\r\nrenderPurchaseBtns();\r\n\r\n// Workout how many units have been entered for purchase\r\nconst workoutEnteredAmount = function (e, accountAmount) {\r\n  let totalInput = 0;\r\n  const secondInput = e.key;\r\n  const firstInput = document.querySelector(\".buy-input\").value;\r\n\r\n  // Join values and turn to number type\r\n  totalInput = +firstInput.concat(secondInput);\r\n\r\n  const price = mockData.find(function (share) {\r\n    return share.ticker === targetShareID;\r\n  }).price;\r\n  const totalAmount = price * totalInput;\r\n\r\n  // If a non number key is pressed do nothing\r\n  if (Number.isNaN(totalInput)) {\r\n  } else {\r\n    // Otherwise render the purchase summary message\r\n    viewBuyPopUp.renderPurchaseSummary(totalInput, targetShareID, totalAmount);\r\n  }\r\n\r\n  // If the value entered is more than what's in the account\r\n  if (accountAmount < totalAmount) {\r\n    viewBuyPopUp.renderPurchaseError(totalAmount, accountAmount);\r\n  }\r\n  return totalAmount;\r\n};\r\n\r\n// Back button to return to view more pop up\r\nbackBtn.addEventListener(\"click\", function () {\r\n  viewBuyPopUp.clearPurchase();\r\n  viewMorePopUp.renderStockPopUp(targetShareID, mockData);\r\n});\r\n\r\n// Make a purchase of shares\r\nconst purchaseShares = function () {\r\n  document.addEventListener(\"click\", function (e) {\r\n    // Once purchase button is clicked\r\n    if (e.target.classList.contains(\"btn-purchase-text\")) {\r\n      // Input value (numShares)\r\n      const input = document.querySelector(\".buy-input\");\r\n      const inputValue = input.value;\r\n\r\n      // Share price of target stock (sharePrice)\r\n      const targetSharePrice = mockData.find(function (share) {\r\n        return share.ticker === targetShareID;\r\n      }).price;\r\n\r\n      // fundsAvailable\r\n      const availableFunds = modelObject.account1.fundsAvailable;\r\n\r\n      // Check input is valid\r\n      if (inputValue && inputValue > 0) {\r\n        // Check if there is simply enough money\r\n        const result = modelObject.checkFunds(\r\n          availableFunds,\r\n          inputValue,\r\n          targetSharePrice\r\n        );\r\n\r\n        modelObject.addToInvestments(\r\n          mockData,\r\n          modelObject.account1,\r\n          result,\r\n          targetShareID,\r\n          targetSharePrice,\r\n          inputValue\r\n        );\r\n\r\n        // Close the pop up window\r\n        closeViewMorePopUp();\r\n\r\n        // Update bottom bar statistics\r\n        updateBottomBar();\r\n\r\n        return \"successful stock purchase\";\r\n      } else {\r\n        // Render error message: 'Please enter an amount'\r\n        return;\r\n      }\r\n    }\r\n  });\r\n};\r\npurchaseShares();\r\n\r\nconst updatePurchaseSummary = function () {\r\n  document.addEventListener(\"keydown\", function (e) {\r\n    const buyContainer = document.querySelector(\".buy-container\");\r\n\r\n    // If buy container exists yet\r\n    if (buyContainer) {\r\n      console.log(workoutEnteredAmount(e, modelObject.account1.fundsAvailable));\r\n    }\r\n  });\r\n};\r\nupdatePurchaseSummary();\r\n\r\n// TOP BUTTONS LOGIC\r\n//\r\n\r\n// Open withdraw pop up\r\nwithdrawBtn.addEventListener(\"click\", function () {\r\n  viewWithdrawBtn.renderWithdrawPopUp();\r\n});\r\n\r\n// Submit withdraw button\r\ndocument.addEventListener(\"click\", function (e) {\r\n  if (e.target.classList.contains(\"withdraw-btn\")) {\r\n    const withdrawInput = document.querySelector(\".withdraw-input\").value;\r\n\r\n    let withdrawResult = modelObject.withdrawAccount(withdrawInput);\r\n\r\n    // If invalid input entered\r\n    if (withdrawResult === \"failure-invalid-input\") {\r\n      viewWithdrawBtn.renderWithdrawErrorMessage(\r\n        \"Please enter an amount greater than zero!\"\r\n      );\r\n    }\r\n\r\n    // If not enough in account to withdraw\r\n    if (withdrawResult === \"failure-not-enough\") {\r\n      viewWithdrawBtn.renderWithdrawErrorMessage(\r\n        \"You do not have enough funds to withdraw this much!\"\r\n      );\r\n    }\r\n\r\n    if (withdrawResult === \"success\") {\r\n      // Pass into model\r\n      withdrawResult;\r\n\r\n      // Close the window\r\n      viewMorePopUp.hideViewMore();\r\n\r\n      viewMorePopUp.clearViewMore();\r\n      viewBuyPopUp.clearPurchase();\r\n      viewWithdrawBtn.clearWithdrawPopUp();\r\n\r\n      // Re-render bottom bar statistics with updated data\r\n      updateBottomBar();\r\n\r\n      return;\r\n    }\r\n  }\r\n});\r\n\r\n// Open deposits pop up\r\ndepositBtn.addEventListener(\"click\", function () {\r\n  viewDepositBtn.renderDepositPopup();\r\n});\r\n\r\n// Submit deposit button\r\ndocument.addEventListener(\"click\", function (e) {\r\n  // If the correct button is clicked\r\n  if (e.target.classList.contains(\"deposit-btn\")) {\r\n    // Get the value entered in the input\r\n    const depositInput = +document.querySelector(\".deposit-input\").value;\r\n\r\n    let depositResult = modelObject.depositAccount(depositInput);\r\n\r\n    // If invalid input\r\n    if (depositResult === \"error\") {\r\n      // Render deposit error message\r\n      viewDepositBtn.renderDepositErrorMessage();\r\n      return;\r\n    }\r\n\r\n    if (depositResult === \"success\") {\r\n      // Pass into model\r\n      depositResult;\r\n\r\n      // Close the window\r\n      viewMorePopUp.hideViewMore();\r\n\r\n      viewMorePopUp.clearViewMore();\r\n      viewBuyPopUp.clearPurchase();\r\n      viewDepositBtn.clearDepositPopup();\r\n\r\n      // Re-render bottom bar statistics with updated data\r\n      updateBottomBar();\r\n\r\n      return;\r\n    }\r\n  }\r\n});\r\n// View account button\r\nviewAccountBtn.addEventListener(\"click\", function () {\r\n  // Reveal navigation for viewing account history\r\n  viewAccount.renderAccountNavigation();\r\n\r\n  // Return movement and trade buttons to original state\r\n  tradesBtn.classList.remove(\"btn-dark\");\r\n  tradesBtn.classList.add(\"btn-light\");\r\n  movementsBtn.classList.remove(\"btn-light\");\r\n  movementsBtn.classList.add(\"btn-dark\");\r\n\r\n  // Clear share cards\r\n  viewAccount.clearViewWindow();\r\n\r\n  // If there is no account history yet\r\n  if (modelObject.account1.movementHistory.length === 0) {\r\n    console.log(\"no history\");\r\n    return;\r\n  }\r\n\r\n  //  Render movement history cards (if there are any)\r\n  if (modelObject.account1.movementHistory.length > 0) {\r\n    viewAccount.renderAccountMovements(modelObject.account1.movementHistory);\r\n    return;\r\n  }\r\n});\r\n\r\n// Close view account history\r\naccountBackBtn.addEventListener(\"click\", function () {\r\n  // Hide account navigation UI\r\n  viewAccount.hideAccountNavigation();\r\n\r\n  // Clear account history content\r\n  viewAccount.clearViewWindow();\r\n\r\n  // Render share cards\r\n  mainViewObject.renderStockList(mockData);\r\n});\r\n\r\n// Switching between viewing movements history and trades history\r\ntradesBtn.addEventListener(\"click\", function () {\r\n  // Adjusting CSS styling\r\n  movementsBtn.classList.remove(\"btn-dark\");\r\n  movementsBtn.classList.add(\"btn-light\");\r\n  tradesBtn.classList.remove(\"btn-light\");\r\n  tradesBtn.classList.add(\"btn-dark\");\r\n\r\n  // Clear old content\r\n  viewAccount.clearViewWindow();\r\n\r\n  // Render trade cards (if there are any)\r\n  if (modelObject.account1.tradeHistory.length === 0) {\r\n    console.log(\"no trade history\");\r\n    return;\r\n  }\r\n\r\n  if (modelObject.account1.tradeHistory.length > 0) {\r\n    viewAccount.renderAccountTrades(modelObject.account1.tradeHistory);\r\n  }\r\n});\r\n\r\nmovementsBtn.addEventListener(\"click\", function () {\r\n  // Adjusting CSS styling\r\n  tradesBtn.classList.remove(\"btn-dark\");\r\n  tradesBtn.classList.add(\"btn-light\");\r\n  movementsBtn.classList.remove(\"btn-light\");\r\n  movementsBtn.classList.add(\"btn-dark\");\r\n\r\n  // Clear old content\r\n  viewAccount.clearViewWindow();\r\n\r\n  // Render movement history cards\r\n  if (modelObject.account1.movementHistory.length === 0) {\r\n    console.log(\"no history\");\r\n  }\r\n\r\n  if (modelObject.account1.movementHistory.length > 0) {\r\n    viewAccount.renderAccountMovements(modelObject.account1.movementHistory);\r\n  }\r\n});\r\n\r\n// INVESTMENT GROUP CODE\r\n//\r\n\r\nlet tallyObjectArr = \"\";\r\n\r\n// Render the portfolio UI\r\nportfolioBtn.addEventListener(\"click\", function () {\r\n  // Clear share cards from view\r\n  viewAccount.clearViewWindow();\r\n\r\n  // Render portfolio navigation\r\n  viewPortfolio.renderPortfolioNavigation();\r\n\r\n  // Render portfolio headings\r\n  viewPortfolio.renderPortfolioView();\r\n\r\n  // Tally up all individual data to render on group investment cards\r\n  tallyObjectArr = modelObject.buildTallyObject(modelObject.account1.portfolio);\r\n\r\n  // Render group investment cards in portfolio view from account data\r\n  viewInvestmentGroup.renderGroupInvestment(tallyObjectArr);\r\n});\r\n\r\nlet targetGroupID = \"\";\r\nlet individualInvestmentsArray = \"\";\r\n\r\n// Reveal individual investments under group investment\r\ndocument.addEventListener(\"click\", function (e) {\r\n  if (e.target.classList.contains(\"investment-group-icon\")) {\r\n    const targetIcon = e.target.closest(\".investment-group-button\");\r\n\r\n    // Find correct investment group (and it's data) and build the array of individual investment objects\r\n    targetGroupID = e.target.closest(\".investment-group\").id;\r\n    const groupInvestmentArray = modelObject.buildTallyObject(\r\n      modelObject.account1.portfolio\r\n    );\r\n\r\n    individualInvestmentsArray = modelObject.buildIndividualInvestmentArray(\r\n      groupInvestmentArray,\r\n      targetGroupID\r\n    );\r\n\r\n    // Render this data in individual investment cards\r\n    viewInvestmentIndividual.renderIndividualInvestments(\r\n      individualInvestmentsArray,\r\n      targetGroupID\r\n    );\r\n\r\n    // Change the chevron direction\r\n    viewInvestmentGroup.changeChevron(targetIcon);\r\n  }\r\n});\r\n\r\nlet targetInvestmentTicker = \"\";\r\nlet targetInvestmentID = \"\";\r\n\r\n// Selling individual investments\r\ndocument.addEventListener(\"click\", function (e) {\r\n  // When the sell icon is clicked\r\n  if (e.target.classList.contains(\"individual-investment-icon\")) {\r\n    // Clear the pop ups content\r\n    viewMorePopUp.showViewMore();\r\n\r\n    // Stock ticker - locate correct group investment\r\n    targetInvestmentTicker = Array.from(\r\n      e.target.closest(\".individual-investment\").classList\r\n    )[1];\r\n\r\n    // ID of clicked investment - locate correct individual investment\r\n    targetInvestmentID = +e.target.closest(\".individual-investment\").id;\r\n\r\n    // Render sell popup\r\n    viewSellPopUp.renderSellPopUp();\r\n  }\r\n});\r\n\r\n// Carry out the investment sale\r\ndocument.addEventListener(\"click\", function (e) {\r\n  if (e.target.id === \"btn-confirm-sell\") {\r\n    // Delete individual investment object from that array\r\n    const renderResult = modelObject.sellIndividualInvestment(\r\n      targetInvestmentTicker,\r\n      targetInvestmentID\r\n    );\r\n\r\n    // If it is the only existing investment\r\n    if (renderResult === \"single\") {\r\n      // Clear share cards from view\r\n      viewAccount.clearViewWindow();\r\n\r\n      // Render portfolio headings\r\n      viewPortfolio.renderPortfolioView();\r\n\r\n      // Tally up all individual data to render on group investment cards\r\n      tallyObjectArr = modelObject.buildTallyObject(\r\n        modelObject.account1.portfolio\r\n      );\r\n\r\n      // Render group investment cards in portfolio view from account data\r\n      viewInvestmentGroup.renderGroupInvestment(tallyObjectArr);\r\n    }\r\n\r\n    // If there are other existing investments\r\n    if (renderResult === \"multiple\") {\r\n      // Clear share cards from view\r\n      viewAccount.clearViewWindow();\r\n\r\n      // Render portfolio headings\r\n      viewPortfolio.renderPortfolioView();\r\n\r\n      // Tally up all individual data to render on group investment cards\r\n      tallyObjectArr = modelObject.buildTallyObject(\r\n        modelObject.account1.portfolio\r\n      );\r\n\r\n      // Re-render the current investments view\r\n      viewInvestmentGroup.renderGroupInvestment(tallyObjectArr);\r\n    }\r\n\r\n    // Update bottom bar statistics\r\n    updateBottomBar();\r\n\r\n    // Close the sell pop up\r\n    closeViewMorePopUp();\r\n  }\r\n});\r\n\r\n// Close sell pop up button\r\ndocument.addEventListener(\"click\", function (e) {\r\n  // When no-sell button is clicked\r\n  if (e.target.id === \"btn-deny-sell\") {\r\n    closeViewMorePopUp();\r\n  }\r\n});\r\n","export const renderFundsAvailanble = function (availableFunds) {\r\n  const fundsAvailable = document.querySelector(\"#funds-available\");\r\n  fundsAvailable.textContent = availableFunds;\r\n  return;\r\n};\r\n\r\nexport const renderFundsInvested = function (investedFunds) {\r\n  const fundsInvested = document.querySelector(\"#funds-invested\");\r\n  fundsInvested.textContent = investedFunds;\r\n  return;\r\n};\r\n\r\nexport const renderCurrentValue = function (currentValue) {\r\n  const curValue = document.querySelector(\"#current-value\");\r\n  curValue.textContent = currentValue;\r\n  return;\r\n};\r\n","/*<div class=\"details-close\">\r\n            <svg class=\"details-close-icon\">\r\n              <use xlink:href=\"CSS/close-sprite.svg#icon-cross\"></use>\r\n            </svg>\r\n          </div>*/\r\nexport const renderIndividualInvestments = function (\r\n  individualArrayInvestments,\r\n  targetID\r\n) {\r\n  const investmentContainerArray = Array.from(\r\n    document.querySelectorAll(\".investment-container\")\r\n  );\r\n\r\n  const targetInvestmentContainer = investmentContainerArray.find(function (\r\n    investmentContainer\r\n  ) {\r\n    return investmentContainer.id === targetID;\r\n  });\r\n\r\n  // Add or remove the reveal class based on the current state\r\n  targetInvestmentContainer.classList.toggle(\"smooth-reveal\");\r\n\r\n  // Clear investment containers content\r\n  const currentContent = Array.from(targetInvestmentContainer.childNodes);\r\n\r\n  // Remove each child element from the array\r\n  currentContent.forEach(function (content) {\r\n    content.remove();\r\n    return;\r\n  });\r\n\r\n  // If the class IS on the investment container, render it\r\n\r\n  if (targetInvestmentContainer.classList.contains(\"smooth-reveal\")) {\r\n    individualArrayInvestments.forEach(function (investment) {\r\n      targetInvestmentContainer.insertAdjacentHTML(\r\n        \"beforeend\",\r\n        `\r\n        <div class=\"individual-investment ${investment.investmentTicker}\" id=\"${\r\n          investment.investmentID\r\n        }\">\r\n          <div class=\"individual-investment-date\">\r\n            <p class=\"main-text center-text\">\r\n              21/01/2022\r\n            </p>\r\n          </div>\r\n          \r\n          <div class=\"individual-investment-price\">         \r\n            <p class=\"main-text center-text\">\r\n              $${investment.investmentSharePrice.toFixed(2)}\r\n            </p>\r\n          </div>\r\n          \r\n          <div class=\"individual-investment-numshares\">    \r\n            <p class=\"main-text center-text\">\r\n              ${investment.totalNumShares.toFixed(2)}\r\n            </p>\r\n          </div>\r\n          \r\n          <div class=\"individual-investment-invested\">\r\n            <p class=\"main-text center-text\">\r\n              $${investment.investmentInitValue.toFixed(2)}\r\n            </p>\r\n          </div>\r\n\r\n          <div class=\"individual-investment-sell\">\r\n            <svg class=\"individual-investment-icon\">\r\n              <use xlink:href=\"CSS/close-sprite.svg#icon-cross\"></use>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n        `\r\n      );\r\n    });\r\n  }\r\n};\r\n"],"names":["$9af0ef7edcbbcdd2$export$f892a32edd39487a","join","$9af0ef7edcbbcdd2$var$recordDate","today","Date","String","getDate","padStart","getMonth","getFullYear","$9af0ef7edcbbcdd2$export$26859a88c99aee90","constructor","accountName","fundsAvailable","fundsInvested","this","portfolio","currency","movementHistory","tradeHistory","$9af0ef7edcbbcdd2$var$Investment","investmentShareName","investmentSharePrice","investmentTicker","totalNumShares","investmentInitValue","investmentID","$9af0ef7edcbbcdd2$export$cbd12fb0cc794bd4","shareName","sharePrice","shareTicker","numShares","initValue","accountPortfolio","tallyArray","forEach","investment","tallyID","slice","tallyData","averageSharePrice","map","price","start","length","tallyNumShares","reduce","tallyInvested","invested","tallyObject","objectID","objectAvgSharePrice","toFixed","objectNumShares","objectInvested","push","$b114698361d35971$var$stockContainer","document","querySelector","$b114698361d35971$export$1c68c4c0147f54ac","stockArray","stock","insertAdjacentHTML","ticker","$fdd89e01e8ae32aa$var$stockPopUp","$fdd89e01e8ae32aa$var$overlay","$fdd89e01e8ae32aa$var$navigation","$fdd89e01e8ae32aa$var$backBtn","$fdd89e01e8ae32aa$export$c34ee96e82c5b519","classList","add","$fdd89e01e8ae32aa$export$aefb7636c9544822","remove","$fdd89e01e8ae32aa$export$65e4782869f702d7","targetShareID","sharesArray","targetStock","find","share","viewMoreHtml","name","marketCap","marketCapString","$12d0132b072c6f34$var$backBtn","$12d0132b072c6f34$var$navigation","$92b0c7ee660be66f$var$navigation","$92b0c7ee660be66f$var$popup","$92b0c7ee660be66f$var$backBtn","$92b0c7ee660be66f$var$overlay","$0cd30968c2743a8b$var$navigation","$0cd30968c2743a8b$var$popup","$0cd30968c2743a8b$var$backBtn","$0cd30968c2743a8b$var$overlay","$0cd30968c2743a8b$export$4c6cf0a2633f08ef","message","withdrawErrorHtml","withdrawContainer","$a2aa9bb651fea835$var$accountNavigation","$a2aa9bb651fea835$var$mainViewContainer","$a2aa9bb651fea835$var$navLeft","$a2aa9bb651fea835$var$navRight","$a2aa9bb651fea835$export$d788c36de8c95390","movementHistoryArray","movement","date","Math","abs","$a32ba26e67393b16$export$da569821d7de8255","groupInvestmentsArray","portfolioContainer","groupInvestment","$ba38ad910382081b$var$mainViewContainer","$ba38ad910382081b$var$accountNavigation","$ba38ad910382081b$var$nullNavigation","$ba38ad910382081b$export$b45a06465e124f81","$d41b9062da9a195b$var$navigation","$d41b9062da9a195b$var$backBtn","$ffcdefeeba6567a5$var$popUp","$ffcdefeeba6567a5$var$overlay","$ffcdefeeba6567a5$var$btnClosePopUp","$ffcdefeeba6567a5$var$backBtn","$ffcdefeeba6567a5$var$depositBtn","$ffcdefeeba6567a5$var$withdrawBtn","$ffcdefeeba6567a5$var$viewAccountBtn","$ffcdefeeba6567a5$var$accountBackBtn","$ffcdefeeba6567a5$var$movementsBtn","$ffcdefeeba6567a5$var$tradesBtn","$ffcdefeeba6567a5$var$portfolioBtn","$ffcdefeeba6567a5$var$tickerString","$ffcdefeeba6567a5$var$mockData","async","shares","data","fetch","dataObject","json","error","console","$9af0ef7edcbbcdd2$export$e8082dd777420ad1","$ffcdefeeba6567a5$var$updateBottomBar","availableFunds","investedFunds","currentValue","textContent","$ffcdefeeba6567a5$var$targetShareID","addEventListener","e","target","contains","closest","id","$ffcdefeeba6567a5$var$closeViewMorePopUp","$fdd89e01e8ae32aa$export$b892d1f8edd8dcc","$12d0132b072c6f34$export$a34c3f3c3d616ebe","$92b0c7ee660be66f$export$74a145d48671acad","$0cd30968c2743a8b$export$738d49988582a747","$d41b9062da9a195b$export$74627a60b5056a9e","key","stockID","$12d0132b072c6f34$export$c4777c3acf054f10","revealUnits","unitBackground","fundBackground","revealFunds","unitMethod","fundMethod","$ffcdefeeba6567a5$var$workoutEnteredAmount","accountAmount","totalInput","secondInput","value","concat","totalAmount","Number","isNaN","$12d0132b072c6f34$export$7d3ab20b72b1a370","$12d0132b072c6f34$export$25e6cc64147c4c38","inputValue","targetSharePrice","result","account","fundCheckResult","targetShareName","investmentType","targetStockTicker","$9af0ef7edcbbcdd2$export$786b6d8684cc64d2","initialValue","uniqueID","floor","random","newInvestmentArray","Array","newInvestment","curDate","type","$9af0ef7edcbbcdd2$export$d46e42535f082b91","log","withdrawResult","enteredWithdrawAmount","curFundsAvailable","fundsRequested","$9af0ef7edcbbcdd2$export$7abc3cb979f0fc4f","depositResult","enteredDepositAmount","newFunds","$9af0ef7edcbbcdd2$export$8d5020816db32829","depositContainer","$92b0c7ee660be66f$export$f6db4a9c935e63eb","$a2aa9bb651fea835$export$9c333faa01bd801c","$ffcdefeeba6567a5$var$tallyObjectArr","$9af0ef7edcbbcdd2$export$c9699b1a619c1e7c","$ffcdefeeba6567a5$var$targetGroupID","$ffcdefeeba6567a5$var$individualInvestmentsArray","targetIcon","groupInvestmentArray","targetGroupID","targetGroupArray","$9af0ef7edcbbcdd2$export$1a0908741110350f","individualArrayInvestments","targetID","targetInvestmentContainer","from","querySelectorAll","investmentContainer","toggle","childNodes","content","$a58b7d853c806f94$export$850d019d7a7745ab","$a32ba26e67393b16$export$85c8bcf2347a39d3","$ffcdefeeba6567a5$var$targetInvestmentTicker","$ffcdefeeba6567a5$var$targetInvestmentID","renderResult","ID","deleteTargetArr","deleteTargetArrIndex","indexOf","deleteTarget","individualInvestment","deleteTargetIndex","splice","$9af0ef7edcbbcdd2$export$4b7bf3a637de2e1b"],"version":3,"file":"index.8b69050e.js.map"}